name: Go with GolangCI-Lint

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

env:
  GO_VERSION: stable
  GOLANGCI_LINT_VERSION: v2.1
  MODULES: "./pkg ./shared ./menu-service ./order-service ./kitchen-service ./payment-service ./table-service"

jobs:
  detect-modules:
    runs-on: ubuntu-latest
    outputs:
      modules: ${{ steps.set-modules.outputs.modules }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Configure Workspace and Install Dependencies
        run: |
          go work init
          go work use ${{ env.MODULES }}

      - id: set-modules
        run:
          echo "modules=$(go list -m -json | jq -s '.' | jq -c '[.[].Dir]')" >> $GITHUB_OUTPUT

  golangci-lint:
    needs: detect-modules
    runs-on: ubuntu-latest
    strategy:
      matrix:
        modules: ${{ fromJSON(needs.detect-modules.outputs.modules) }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Configure Workspace and Install Dependencies
        run: |
          go work init
          go work use ${{ env.MODULES }}
          cd ${{ matrix.modules }} && go mod tidy && go mod download

      - name: golangci-lint ${{ matrix.modules }}
        uses: golangci/golangci-lint-action@v8
        with:
          version: ${{ env.GOLANGCI_LINT_VERSION }}
          working-directory: ${{ matrix.modules }}

  test:
    needs: detect-modules
    runs-on: ubuntu-latest
    strategy:
      matrix:
        modules: ${{ fromJSON(needs.detect-modules.outputs.modules) }}
    outputs:
      modules: ${{ steps.set-modules.outputs.modules }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Configure Workspace and Install Dependencies
        run: |
          go work init
          go work use ${{ env.MODULES }}
          cd ${{ matrix.modules }} && go mod tidy && go mod download

      - name: Run Tests
        run: |
          cd ${{ matrix.modules }}
          go test -v ./...

      - id: set-modules
        run:
          echo "modules=$(go list -m -json all | jq -s '[.[] | select(.Dir | test("shared|pkg") | not) | .Dir]' -c)" >> $GITHUB_OUTPUT

  deploy:
    name: Deploy to DigitalOcean VPS
    runs-on: ubuntu-latest
    needs: [ golangci-lint, test ]
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up SSH key
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Deploy to VPS
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_IP }} << EOF
            cd mini-food-story
            git pull origin main
            chmod +x update_env.sh
          
            ./update_env.sh TRAEFIK_BASIC_AUTH ${{ secrets.TRAEFIK_BASIC_AUTH }}
            ./update_env.sh KEYCLOAK_CERT_URL ${{ secrets.KEYCLOAK_CERT_URL }}
            ./update_env.sh DB_USERNAME ${{ secrets.DB_USERNAME }}
            ./update_env.sh DB_PASSWORD ${{ secrets.DB_PASSWORD }} 
            ./update_env.sh DB_DATABASE ${{ secrets.DB_DATABASE }}
            ./update_env.sh SECRET_KEY ${{ secrets.SECRET_KEY }}

            docker compose -f docker-compose-prod.yml down --remove-orphans
            docker compose -f docker-compose-prod.yml up -d --build
          EOF