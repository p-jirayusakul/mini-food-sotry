x-common-env: &common-env
  APP_ENV: ${APP_ENV}
  DB_USERNAME: ${DB_USERNAME}
  DB_PASSWORD: ${DB_PASSWORD}
  DB_HOST: "psql_bp"
  DB_PORT: "5432"
  DB_SCHEMA: ${DB_SCHEMA}
  DB_DATABASE: ${DB_DATABASE}
  SECRET_KEY: ${SECRET_KEY}
  FRONTEND_URL: ${FRONTEND_URL}
  REDIS_ADDRESS: "dragonfly:6379"
  REDIS_PASSWORD: ${REDIS_PASSWORD}
  KAFKA_BROKERS: "kafka:29092"
  TZ: "Asia/Bangkok"


services:
  dragonfly:
    image: 'docker.dragonflydb.io/dragonflydb/dragonfly'
    ulimits:
      memlock: -1
    ports:
      - "6379:6379"
    volumes:
      - dragonflydata:/data
    networks:
      - mini_food_story

  kafka-ui:
    image: provectuslabs/kafka-ui:v0.7.2
    ports:
      - "8090:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_METRICS_PORT: 9997
      DYNAMIC_CONFIG_ENABLED: 'true'
    depends_on:
      - zookeeper
      - kafka
      - kafka-init-topics
    networks:
      - mini_food_story

  zookeeper:
    image: confluentinc/cp-zookeeper:7.9.1
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - mini_food_story

  kafka:
    image: confluentinc/cp-server:7.9.1
    hostname: kafka
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9997:9997"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 9997
      KAFKA_JMX_HOSTNAME: kafka
    healthcheck:
      test: [ "CMD", "kafka-broker-api-versions", "--bootstrap-server", "kafka:29092" ]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 20s
    networks:
      - mini_food_story

  kafka-init-topics:
    image: confluentinc/cp-kafka:7.9.1
    volumes:
      - ./data/message.json:/data/message.json
    depends_on:
      - kafka
    command: "bash -c 'echo Waiting for Kafka to be ready... && \
               cub kafka-ready -b kafka:29092 1 30 && \
               kafka-topics --create --topic users --partitions 3 --replication-factor 1 --if-not-exists --bootstrap-server kafka:29092 && \
               kafka-topics --create --topic messages --partitions 2 --replication-factor 1 --if-not-exists --bootstrap-server kafka:29092 && \
               kafka-console-producer --bootstrap-server kafka:29092 --topic users < /data/message.json'"
    networks:
      - mini_food_story
#
#  psql_bp:
#    image: postgres:17.5
#    restart: unless-stopped
#    environment:
#      POSTGRES_DB: ${DB_DATABASE}
#      POSTGRES_USER: ${DB_USERNAME}
#      POSTGRES_PASSWORD: ${DB_PASSWORD}
#      TZ: "Asia/Bangkok"
#    ports:
#      - "5432:5432"
#    volumes:
#      - psql_volume_bp:/var/lib/postgresql/data
#    healthcheck:
#      test: [ "CMD-SHELL", "pg_isready -U ${DB_USERNAME}" ]
#      interval: 10s
#      timeout: 5s
#      retries: 3
#    networks:
#      - mini_food_story
#
#  pgadmin:
#    image: dpage/pgadmin4
#    container_name: pgadmin-container
#    environment:
#      PGADMIN_DEFAULT_EMAIL: user@domain.com
#      PGADMIN_DEFAULT_PASSWORD: ${DB_PASSWORD}
#    ports:
#      - "5050:80"
#    networks:
#      - mini_food_story
#    depends_on:
#      psql_bp:
#        condition: service_healthy
#    volumes:
#      - pgadmin_data:/var/lib/pgadmin
#
#  migrate:
#    image: migrate/migrate
#    container_name: my_migration
#    volumes:
#      - ./shared/database/migrations:/migrations
#    command: [
#      "-path", "/migrations",
#      "-database", "postgres://postgres:1234@psql_bp:5432/food_story?sslmode=disable&search_path=public",
#      "up"
#    ]
#    depends_on:
#      psql_bp:
#        condition: service_healthy
#    networks:
#      - mini_food_story
#
#  table-service:
#    build:
#      context: ./       # Root directory ของ mono repo
#      dockerfile: table-service/Dockerfile
#    restart: unless-stopped
#    ports:
#      - "8080:8080"
#    environment:
#      <<: *common-env
#      PORT: 8080
#    depends_on:
#      psql_bp:
#        condition: service_healthy
#      dragonfly:
#        condition: service_healthy
#
#    networks:
#      - mini_food_story
#
#  menu-service:
#    build:
#      context: ./
#      dockerfile: menu-service/Dockerfile
#    restart: unless-stopped
#    ports:
#      - "8081:8081"
#    environment:
#      <<: *common-env
#      PORT: 8081
#    depends_on:
#      psql_bp:
#        condition: service_healthy
#      dragonfly:
#        condition: service_healthy
#    networks:
#      - mini_food_story
#
#  order-service:
#    build:
#      context: ./
#      dockerfile: order-service/Dockerfile
#    restart: unless-stopped
#    ports:
#      - "8082:8082"
#    environment:
#      <<: *common-env
#      PORT: 8082
#    depends_on:
#      psql_bp:
#        condition: service_healthy
#      kafka:
#        condition: service_healthy
#      dragonfly:
#        condition: service_healthy
#    networks:
#      - mini_food_story
#
#  kitchen-service:
#    build:
#      context: ./
#      dockerfile: kitchen-service/Dockerfile
#    restart: unless-stopped
#    ports:
#      - "8083:8083"
#    environment:
#      <<: *common-env
#      PORT: 8083
#    depends_on:
#      psql_bp:
#        condition: service_healthy
#      kafka:
#        condition: service_healthy
#      dragonfly:
#        condition: service_healthy
#    networks:
#      - mini_food_story

volumes:
  dragonflydata:
  psql_volume_bp:
  pgadmin_data:
networks:
  mini_food_story: