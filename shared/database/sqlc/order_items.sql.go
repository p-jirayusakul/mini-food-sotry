// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: order_items.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

type CreateOrderItemsParams struct {
	ID            int64            `json:"id"`
	OrderID       int64            `json:"order_id"`
	ProductID     int64            `json:"product_id"`
	StatusID      int64            `json:"status_id"`
	ProductName   string           `json:"product_name"`
	ProductNameEn string           `json:"product_name_en"`
	Price         pgtype.Numeric   `json:"price"`
	Quantity      int32            `json:"quantity"`
	Note          pgtype.Text      `json:"note"`
	CreatedAt     pgtype.Timestamp `json:"created_at"`
}

const getOrderItemsByID = `-- name: GetOrderItemsByID :one
SELECT id, order_id, product_id, status_id, product_name, product_name_en, price, quantity, note
FROM public.order_items WHERE id = $1
`

type GetOrderItemsByIDRow struct {
	ID            int64          `json:"id"`
	OrderID       int64          `json:"order_id"`
	ProductID     int64          `json:"product_id"`
	StatusID      int64          `json:"status_id"`
	ProductName   string         `json:"product_name"`
	ProductNameEn string         `json:"product_name_en"`
	Price         pgtype.Numeric `json:"price"`
	Quantity      int32          `json:"quantity"`
	Note          pgtype.Text    `json:"note"`
}

func (q *Queries) GetOrderItemsByID(ctx context.Context, id int64) (*GetOrderItemsByIDRow, error) {
	row := q.db.QueryRow(ctx, getOrderItemsByID, id)
	var i GetOrderItemsByIDRow
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.ProductID,
		&i.StatusID,
		&i.ProductName,
		&i.ProductNameEn,
		&i.Price,
		&i.Quantity,
		&i.Note,
	)
	return &i, err
}

const isOrderItemsExist = `-- name: IsOrderItemsExist :one
SELECT COUNT(id) > 0
FROM public.order_items WHERE id = $1
`

func (q *Queries) IsOrderItemsExist(ctx context.Context, id int64) (bool, error) {
	row := q.db.QueryRow(ctx, isOrderItemsExist, id)
	var column_1 bool
	err := row.Scan(&column_1)
	return column_1, err
}

const updateOrderItemsStatus = `-- name: UpdateOrderItemsStatus :exec
UPDATE public.order_items
SET status_id = (SELECT id FROM public.md_order_statuses WHERE code = $1::text LIMIT 1), updated_at = NOW()
WHERE id = $2::bigint
`

type UpdateOrderItemsStatusParams struct {
	StatusCode string `json:"status_code"`
	ID         int64  `json:"id"`
}

func (q *Queries) UpdateOrderItemsStatus(ctx context.Context, arg UpdateOrderItemsStatusParams) error {
	_, err := q.db.Exec(ctx, updateOrderItemsStatus, arg.StatusCode, arg.ID)
	return err
}
