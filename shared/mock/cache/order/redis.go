// Code generated by MockGen. DO NOT EDIT.
// Source: food-story/order-service/internal/adapter/cache (interfaces: RedisTableCacheInterface)
//
// Generated by this command:
//
//	mockgen -package mockcache -destination shared/mock/cache/order/redis.go food-story/order-service/internal/adapter/cache RedisTableCacheInterface
//

// Package mockcache is a generated GoMock package.
package mockcache

import (
	exceptions "food-story/pkg/exceptions"
	model "food-story/shared/model"
	reflect "reflect"

	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockRedisTableCacheInterface is a mock of RedisTableCacheInterface interface.
type MockRedisTableCacheInterface struct {
	ctrl     *gomock.Controller
	recorder *MockRedisTableCacheInterfaceMockRecorder
	isgomock struct{}
}

// MockRedisTableCacheInterfaceMockRecorder is the mock recorder for MockRedisTableCacheInterface.
type MockRedisTableCacheInterfaceMockRecorder struct {
	mock *MockRedisTableCacheInterface
}

// NewMockRedisTableCacheInterface creates a new mock instance.
func NewMockRedisTableCacheInterface(ctrl *gomock.Controller) *MockRedisTableCacheInterface {
	mock := &MockRedisTableCacheInterface{ctrl: ctrl}
	mock.recorder = &MockRedisTableCacheInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRedisTableCacheInterface) EXPECT() *MockRedisTableCacheInterfaceMockRecorder {
	return m.recorder
}

// DeleteCachedTable mocks base method.
func (m *MockRedisTableCacheInterface) DeleteCachedTable(sessionID uuid.UUID) *exceptions.CustomError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCachedTable", sessionID)
	ret0, _ := ret[0].(*exceptions.CustomError)
	return ret0
}

// DeleteCachedTable indicates an expected call of DeleteCachedTable.
func (mr *MockRedisTableCacheInterfaceMockRecorder) DeleteCachedTable(sessionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCachedTable", reflect.TypeOf((*MockRedisTableCacheInterface)(nil).DeleteCachedTable), sessionID)
}

// GetCachedTable mocks base method.
func (m *MockRedisTableCacheInterface) GetCachedTable(sessionID uuid.UUID) (*model.CurrentTableSession, *exceptions.CustomError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCachedTable", sessionID)
	ret0, _ := ret[0].(*model.CurrentTableSession)
	ret1, _ := ret[1].(*exceptions.CustomError)
	return ret0, ret1
}

// GetCachedTable indicates an expected call of GetCachedTable.
func (mr *MockRedisTableCacheInterfaceMockRecorder) GetCachedTable(sessionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCachedTable", reflect.TypeOf((*MockRedisTableCacheInterface)(nil).GetCachedTable), sessionID)
}

// IsCachedTableExist mocks base method.
func (m *MockRedisTableCacheInterface) IsCachedTableExist(sessionID uuid.UUID) *exceptions.CustomError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsCachedTableExist", sessionID)
	ret0, _ := ret[0].(*exceptions.CustomError)
	return ret0
}

// IsCachedTableExist indicates an expected call of IsCachedTableExist.
func (mr *MockRedisTableCacheInterfaceMockRecorder) IsCachedTableExist(sessionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsCachedTableExist", reflect.TypeOf((*MockRedisTableCacheInterface)(nil).IsCachedTableExist), sessionID)
}

// UpdateOrderID mocks base method.
func (m *MockRedisTableCacheInterface) UpdateOrderID(sessionID uuid.UUID, orderID int64) *exceptions.CustomError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrderID", sessionID, orderID)
	ret0, _ := ret[0].(*exceptions.CustomError)
	return ret0
}

// UpdateOrderID indicates an expected call of UpdateOrderID.
func (mr *MockRedisTableCacheInterfaceMockRecorder) UpdateOrderID(sessionID, orderID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrderID", reflect.TypeOf((*MockRedisTableCacheInterface)(nil).UpdateOrderID), sessionID, orderID)
}
