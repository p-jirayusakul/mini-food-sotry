// Code generated by MockGen. DO NOT EDIT.
// Source: food-story/table-service/internal/adapter/cache (interfaces: RedisTableCacheInterface)
//
// Generated by this command:
//
//	mockgen -package mockcache -destination shared/mock/cache/table/redis.go food-story/table-service/internal/adapter/cache RedisTableCacheInterface
//

// Package mockcache is a generated GoMock package.
package mockcache

import (
	exceptions "food-story/pkg/exceptions"
	model "food-story/shared/model"
	reflect "reflect"
	time "time"

	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockRedisTableCacheInterface is a mock of RedisTableCacheInterface interface.
type MockRedisTableCacheInterface struct {
	ctrl     *gomock.Controller
	recorder *MockRedisTableCacheInterfaceMockRecorder
	isgomock struct{}
}

// MockRedisTableCacheInterfaceMockRecorder is the mock recorder for MockRedisTableCacheInterface.
type MockRedisTableCacheInterfaceMockRecorder struct {
	mock *MockRedisTableCacheInterface
}

// NewMockRedisTableCacheInterface creates a new mock instance.
func NewMockRedisTableCacheInterface(ctrl *gomock.Controller) *MockRedisTableCacheInterface {
	mock := &MockRedisTableCacheInterface{ctrl: ctrl}
	mock.recorder = &MockRedisTableCacheInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRedisTableCacheInterface) EXPECT() *MockRedisTableCacheInterfaceMockRecorder {
	return m.recorder
}

// DeleteCachedTable mocks base method.
func (m *MockRedisTableCacheInterface) DeleteCachedTable(key string) *exceptions.CustomError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCachedTable", key)
	ret0, _ := ret[0].(*exceptions.CustomError)
	return ret0
}

// DeleteCachedTable indicates an expected call of DeleteCachedTable.
func (mr *MockRedisTableCacheInterfaceMockRecorder) DeleteCachedTable(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCachedTable", reflect.TypeOf((*MockRedisTableCacheInterface)(nil).DeleteCachedTable), key)
}

// GetCachedTable mocks base method.
func (m *MockRedisTableCacheInterface) GetCachedTable(key string) (*model.CurrentTableSession, *exceptions.CustomError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCachedTable", key)
	ret0, _ := ret[0].(*model.CurrentTableSession)
	ret1, _ := ret[1].(*exceptions.CustomError)
	return ret0, ret1
}

// GetCachedTable indicates an expected call of GetCachedTable.
func (mr *MockRedisTableCacheInterfaceMockRecorder) GetCachedTable(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCachedTable", reflect.TypeOf((*MockRedisTableCacheInterface)(nil).GetCachedTable), key)
}

// GetCachedTableNumber mocks base method.
func (m *MockRedisTableCacheInterface) GetCachedTableNumber(key string) (int32, *exceptions.CustomError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCachedTableNumber", key)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(*exceptions.CustomError)
	return ret0, ret1
}

// GetCachedTableNumber indicates an expected call of GetCachedTableNumber.
func (mr *MockRedisTableCacheInterfaceMockRecorder) GetCachedTableNumber(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCachedTableNumber", reflect.TypeOf((*MockRedisTableCacheInterface)(nil).GetCachedTableNumber), key)
}

// IsCachedTableExist mocks base method.
func (m *MockRedisTableCacheInterface) IsCachedTableExist(sessionID uuid.UUID) *exceptions.CustomError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsCachedTableExist", sessionID)
	ret0, _ := ret[0].(*exceptions.CustomError)
	return ret0
}

// IsCachedTableExist indicates an expected call of IsCachedTableExist.
func (mr *MockRedisTableCacheInterfaceMockRecorder) IsCachedTableExist(sessionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsCachedTableExist", reflect.TypeOf((*MockRedisTableCacheInterface)(nil).IsCachedTableExist), sessionID)
}

// SetCachedTable mocks base method.
func (m *MockRedisTableCacheInterface) SetCachedTable(key string, table *model.CurrentTableSession, ttl time.Duration) *exceptions.CustomError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetCachedTable", key, table, ttl)
	ret0, _ := ret[0].(*exceptions.CustomError)
	return ret0
}

// SetCachedTable indicates an expected call of SetCachedTable.
func (mr *MockRedisTableCacheInterfaceMockRecorder) SetCachedTable(key, table, ttl any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCachedTable", reflect.TypeOf((*MockRedisTableCacheInterface)(nil).SetCachedTable), key, table, ttl)
}

// SetCachedTableNumber mocks base method.
func (m *MockRedisTableCacheInterface) SetCachedTableNumber(key string, tableNumber int32, ttl time.Duration) *exceptions.CustomError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetCachedTableNumber", key, tableNumber, ttl)
	ret0, _ := ret[0].(*exceptions.CustomError)
	return ret0
}

// SetCachedTableNumber indicates an expected call of SetCachedTableNumber.
func (mr *MockRedisTableCacheInterfaceMockRecorder) SetCachedTableNumber(key, tableNumber, ttl any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCachedTableNumber", reflect.TypeOf((*MockRedisTableCacheInterface)(nil).SetCachedTableNumber), key, tableNumber, ttl)
}
