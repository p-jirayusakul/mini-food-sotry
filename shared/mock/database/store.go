// Code generated by MockGen. DO NOT EDIT.
// Source: food-story/shared/database/sqlc (interfaces: Store)
//
// Generated by this command:
//
//	mockgen -package mockdb -destination shared/mock/database/store.go food-story/shared/database/sqlc Store
//

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	database "food-story/shared/database/sqlc"
	reflect "reflect"

	pgtype "github.com/jackc/pgx/v5/pgtype"
	gomock "go.uber.org/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
	isgomock struct{}
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CreateOrder mocks base method.
func (m *MockStore) CreateOrder(ctx context.Context, arg database.CreateOrderParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", ctx, arg)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockStoreMockRecorder) CreateOrder(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockStore)(nil).CreateOrder), ctx, arg)
}

// CreateOrderItems mocks base method.
func (m *MockStore) CreateOrderItems(ctx context.Context, arg []database.CreateOrderItemsParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrderItems", ctx, arg)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrderItems indicates an expected call of CreateOrderItems.
func (mr *MockStoreMockRecorder) CreateOrderItems(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrderItems", reflect.TypeOf((*MockStore)(nil).CreateOrderItems), ctx, arg)
}

// CreatePayment mocks base method.
func (m *MockStore) CreatePayment(ctx context.Context, arg database.CreatePaymentParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePayment", ctx, arg)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePayment indicates an expected call of CreatePayment.
func (mr *MockStoreMockRecorder) CreatePayment(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePayment", reflect.TypeOf((*MockStore)(nil).CreatePayment), ctx, arg)
}

// CreateProduct mocks base method.
func (m *MockStore) CreateProduct(ctx context.Context, arg database.CreateProductParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProduct", ctx, arg)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProduct indicates an expected call of CreateProduct.
func (mr *MockStoreMockRecorder) CreateProduct(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProduct", reflect.TypeOf((*MockStore)(nil).CreateProduct), ctx, arg)
}

// CreateTable mocks base method.
func (m *MockStore) CreateTable(ctx context.Context, arg database.CreateTableParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTable", ctx, arg)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTable indicates an expected call of CreateTable.
func (mr *MockStoreMockRecorder) CreateTable(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTable", reflect.TypeOf((*MockStore)(nil).CreateTable), ctx, arg)
}

// CreateTableSession mocks base method.
func (m *MockStore) CreateTableSession(ctx context.Context, arg database.CreateTableSessionParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTableSession", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTableSession indicates an expected call of CreateTableSession.
func (mr *MockStoreMockRecorder) CreateTableSession(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTableSession", reflect.TypeOf((*MockStore)(nil).CreateTableSession), ctx, arg)
}

// CreateTableStatus mocks base method.
func (m *MockStore) CreateTableStatus(ctx context.Context, arg database.CreateTableStatusParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTableStatus", ctx, arg)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTableStatus indicates an expected call of CreateTableStatus.
func (mr *MockStoreMockRecorder) CreateTableStatus(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTableStatus", reflect.TypeOf((*MockStore)(nil).CreateTableStatus), ctx, arg)
}

// GetOrderByID mocks base method.
func (m *MockStore) GetOrderByID(ctx context.Context, id int64) (*database.GetOrderByIDRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderByID", ctx, id)
	ret0, _ := ret[0].(*database.GetOrderByIDRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderByID indicates an expected call of GetOrderByID.
func (mr *MockStoreMockRecorder) GetOrderByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderByID", reflect.TypeOf((*MockStore)(nil).GetOrderByID), ctx, id)
}

// GetOrderItemsByID mocks base method.
func (m *MockStore) GetOrderItemsByID(ctx context.Context, id int64) (*database.GetOrderItemsByIDRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderItemsByID", ctx, id)
	ret0, _ := ret[0].(*database.GetOrderItemsByIDRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderItemsByID indicates an expected call of GetOrderItemsByID.
func (mr *MockStoreMockRecorder) GetOrderItemsByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderItemsByID", reflect.TypeOf((*MockStore)(nil).GetOrderItemsByID), ctx, id)
}

// GetOrderSequence mocks base method.
func (m *MockStore) GetOrderSequence(ctx context.Context, orderDate pgtype.Date) (int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderSequence", ctx, orderDate)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderSequence indicates an expected call of GetOrderSequence.
func (mr *MockStoreMockRecorder) GetOrderSequence(ctx, orderDate any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderSequence", reflect.TypeOf((*MockStore)(nil).GetOrderSequence), ctx, orderDate)
}

// GetOrderStatusPreparing mocks base method.
func (m *MockStore) GetOrderStatusPreparing(ctx context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderStatusPreparing", ctx)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderStatusPreparing indicates an expected call of GetOrderStatusPreparing.
func (mr *MockStoreMockRecorder) GetOrderStatusPreparing(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderStatusPreparing", reflect.TypeOf((*MockStore)(nil).GetOrderStatusPreparing), ctx)
}

// GetOrderWithItems mocks base method.
func (m *MockStore) GetOrderWithItems(ctx context.Context, orderID int64) ([]*database.GetOrderWithItemsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderWithItems", ctx, orderID)
	ret0, _ := ret[0].([]*database.GetOrderWithItemsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderWithItems indicates an expected call of GetOrderWithItems.
func (mr *MockStoreMockRecorder) GetOrderWithItems(ctx, orderID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderWithItems", reflect.TypeOf((*MockStore)(nil).GetOrderWithItems), ctx, orderID)
}

// GetOrderWithItemsByID mocks base method.
func (m *MockStore) GetOrderWithItemsByID(ctx context.Context, arg database.GetOrderWithItemsByIDParams) (*database.GetOrderWithItemsByIDRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderWithItemsByID", ctx, arg)
	ret0, _ := ret[0].(*database.GetOrderWithItemsByIDRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderWithItemsByID indicates an expected call of GetOrderWithItemsByID.
func (mr *MockStoreMockRecorder) GetOrderWithItemsByID(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderWithItemsByID", reflect.TypeOf((*MockStore)(nil).GetOrderWithItemsByID), ctx, arg)
}

// GetOrderWithItemsGroupID mocks base method.
func (m *MockStore) GetOrderWithItemsGroupID(ctx context.Context, orderItemsID []int64) ([]*database.GetOrderWithItemsGroupIDRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderWithItemsGroupID", ctx, orderItemsID)
	ret0, _ := ret[0].([]*database.GetOrderWithItemsGroupIDRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderWithItemsGroupID indicates an expected call of GetOrderWithItemsGroupID.
func (mr *MockStoreMockRecorder) GetOrderWithItemsGroupID(ctx, orderItemsID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderWithItemsGroupID", reflect.TypeOf((*MockStore)(nil).GetOrderWithItemsGroupID), ctx, orderItemsID)
}

// GetPaymentOrderIDByTransaction mocks base method.
func (m *MockStore) GetPaymentOrderIDByTransaction(ctx context.Context, transactionID string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPaymentOrderIDByTransaction", ctx, transactionID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPaymentOrderIDByTransaction indicates an expected call of GetPaymentOrderIDByTransaction.
func (mr *MockStoreMockRecorder) GetPaymentOrderIDByTransaction(ctx, transactionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaymentOrderIDByTransaction", reflect.TypeOf((*MockStore)(nil).GetPaymentOrderIDByTransaction), ctx, transactionID)
}

// GetProductAvailableByID mocks base method.
func (m *MockStore) GetProductAvailableByID(ctx context.Context, id int64) (*database.GetProductAvailableByIDRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductAvailableByID", ctx, id)
	ret0, _ := ret[0].(*database.GetProductAvailableByIDRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductAvailableByID indicates an expected call of GetProductAvailableByID.
func (mr *MockStoreMockRecorder) GetProductAvailableByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductAvailableByID", reflect.TypeOf((*MockStore)(nil).GetProductAvailableByID), ctx, id)
}

// GetProductByID mocks base method.
func (m *MockStore) GetProductByID(ctx context.Context, id int64) (*database.GetProductByIDRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductByID", ctx, id)
	ret0, _ := ret[0].(*database.GetProductByIDRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductByID indicates an expected call of GetProductByID.
func (mr *MockStoreMockRecorder) GetProductByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductByID", reflect.TypeOf((*MockStore)(nil).GetProductByID), ctx, id)
}

// GetTableNumber mocks base method.
func (m *MockStore) GetTableNumber(ctx context.Context, id int64) (int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTableNumber", ctx, id)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTableNumber indicates an expected call of GetTableNumber.
func (mr *MockStoreMockRecorder) GetTableNumber(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTableNumber", reflect.TypeOf((*MockStore)(nil).GetTableNumber), ctx, id)
}

// GetTableNumberOrderByID mocks base method.
func (m *MockStore) GetTableNumberOrderByID(ctx context.Context, orderID int64) (int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTableNumberOrderByID", ctx, orderID)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTableNumberOrderByID indicates an expected call of GetTableNumberOrderByID.
func (mr *MockStoreMockRecorder) GetTableNumberOrderByID(ctx, orderID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTableNumberOrderByID", reflect.TypeOf((*MockStore)(nil).GetTableNumberOrderByID), ctx, orderID)
}

// GetTableSession mocks base method.
func (m *MockStore) GetTableSession(ctx context.Context, sessionid pgtype.UUID) (*database.GetTableSessionRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTableSession", ctx, sessionid)
	ret0, _ := ret[0].(*database.GetTableSessionRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTableSession indicates an expected call of GetTableSession.
func (mr *MockStoreMockRecorder) GetTableSession(ctx, sessionid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTableSession", reflect.TypeOf((*MockStore)(nil).GetTableSession), ctx, sessionid)
}

// GetTimeNow mocks base method.
func (m *MockStore) GetTimeNow(ctx context.Context) (pgtype.Timestamptz, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTimeNow", ctx)
	ret0, _ := ret[0].(pgtype.Timestamptz)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTimeNow indicates an expected call of GetTimeNow.
func (mr *MockStoreMockRecorder) GetTimeNow(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTimeNow", reflect.TypeOf((*MockStore)(nil).GetTimeNow), ctx)
}

// GetTotalAmountToPayForServedItems mocks base method.
func (m *MockStore) GetTotalAmountToPayForServedItems(ctx context.Context, orderID int64) (pgtype.Numeric, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalAmountToPayForServedItems", ctx, orderID)
	ret0, _ := ret[0].(pgtype.Numeric)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTotalAmountToPayForServedItems indicates an expected call of GetTotalAmountToPayForServedItems.
func (mr *MockStoreMockRecorder) GetTotalAmountToPayForServedItems(ctx, orderID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalAmountToPayForServedItems", reflect.TypeOf((*MockStore)(nil).GetTotalAmountToPayForServedItems), ctx, orderID)
}

// GetTotalPageQuickSearchTables mocks base method.
func (m *MockStore) GetTotalPageQuickSearchTables(ctx context.Context, numberOfPeople int32) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalPageQuickSearchTables", ctx, numberOfPeople)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTotalPageQuickSearchTables indicates an expected call of GetTotalPageQuickSearchTables.
func (mr *MockStoreMockRecorder) GetTotalPageQuickSearchTables(ctx, numberOfPeople any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalPageQuickSearchTables", reflect.TypeOf((*MockStore)(nil).GetTotalPageQuickSearchTables), ctx, numberOfPeople)
}

// GetTotalPageSearchProducts mocks base method.
func (m *MockStore) GetTotalPageSearchProducts(ctx context.Context, arg database.GetTotalPageSearchProductsParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalPageSearchProducts", ctx, arg)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTotalPageSearchProducts indicates an expected call of GetTotalPageSearchProducts.
func (mr *MockStoreMockRecorder) GetTotalPageSearchProducts(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalPageSearchProducts", reflect.TypeOf((*MockStore)(nil).GetTotalPageSearchProducts), ctx, arg)
}

// GetTotalPageSearchTables mocks base method.
func (m *MockStore) GetTotalPageSearchTables(ctx context.Context, arg database.GetTotalPageSearchTablesParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalPageSearchTables", ctx, arg)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTotalPageSearchTables indicates an expected call of GetTotalPageSearchTables.
func (mr *MockStoreMockRecorder) GetTotalPageSearchTables(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalPageSearchTables", reflect.TypeOf((*MockStore)(nil).GetTotalPageSearchTables), ctx, arg)
}

// GetTotalSearchOrderItems mocks base method.
func (m *MockStore) GetTotalSearchOrderItems(ctx context.Context, arg database.GetTotalSearchOrderItemsParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalSearchOrderItems", ctx, arg)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTotalSearchOrderItems indicates an expected call of GetTotalSearchOrderItems.
func (mr *MockStoreMockRecorder) GetTotalSearchOrderItems(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalSearchOrderItems", reflect.TypeOf((*MockStore)(nil).GetTotalSearchOrderItems), ctx, arg)
}

// GetTotalSearchOrderItemsIsNotFinal mocks base method.
func (m *MockStore) GetTotalSearchOrderItemsIsNotFinal(ctx context.Context, arg database.GetTotalSearchOrderItemsIsNotFinalParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalSearchOrderItemsIsNotFinal", ctx, arg)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTotalSearchOrderItemsIsNotFinal indicates an expected call of GetTotalSearchOrderItemsIsNotFinal.
func (mr *MockStoreMockRecorder) GetTotalSearchOrderItemsIsNotFinal(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalSearchOrderItemsIsNotFinal", reflect.TypeOf((*MockStore)(nil).GetTotalSearchOrderItemsIsNotFinal), ctx, arg)
}

// Health mocks base method.
func (m *MockStore) Health(ctx context.Context) (int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Health", ctx)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Health indicates an expected call of Health.
func (mr *MockStoreMockRecorder) Health(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Health", reflect.TypeOf((*MockStore)(nil).Health), ctx)
}

// IsOrderExist mocks base method.
func (m *MockStore) IsOrderExist(ctx context.Context, id int64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsOrderExist", ctx, id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsOrderExist indicates an expected call of IsOrderExist.
func (mr *MockStoreMockRecorder) IsOrderExist(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsOrderExist", reflect.TypeOf((*MockStore)(nil).IsOrderExist), ctx, id)
}

// IsOrderItemsExist mocks base method.
func (m *MockStore) IsOrderItemsExist(ctx context.Context, id int64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsOrderItemsExist", ctx, id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsOrderItemsExist indicates an expected call of IsOrderItemsExist.
func (mr *MockStoreMockRecorder) IsOrderItemsExist(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsOrderItemsExist", reflect.TypeOf((*MockStore)(nil).IsOrderItemsExist), ctx, id)
}

// IsOrderItemsNotFinal mocks base method.
func (m *MockStore) IsOrderItemsNotFinal(ctx context.Context, orderID int64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsOrderItemsNotFinal", ctx, orderID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsOrderItemsNotFinal indicates an expected call of IsOrderItemsNotFinal.
func (mr *MockStoreMockRecorder) IsOrderItemsNotFinal(ctx, orderID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsOrderItemsNotFinal", reflect.TypeOf((*MockStore)(nil).IsOrderItemsNotFinal), ctx, orderID)
}

// IsOrderStatusExist mocks base method.
func (m *MockStore) IsOrderStatusExist(ctx context.Context, code string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsOrderStatusExist", ctx, code)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsOrderStatusExist indicates an expected call of IsOrderStatusExist.
func (mr *MockStoreMockRecorder) IsOrderStatusExist(ctx, code any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsOrderStatusExist", reflect.TypeOf((*MockStore)(nil).IsOrderStatusExist), ctx, code)
}

// IsOrderStatusFinal mocks base method.
func (m *MockStore) IsOrderStatusFinal(ctx context.Context, code string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsOrderStatusFinal", ctx, code)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsOrderStatusFinal indicates an expected call of IsOrderStatusFinal.
func (mr *MockStoreMockRecorder) IsOrderStatusFinal(ctx, code any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsOrderStatusFinal", reflect.TypeOf((*MockStore)(nil).IsOrderStatusFinal), ctx, code)
}

// IsOrderWithItemsExists mocks base method.
func (m *MockStore) IsOrderWithItemsExists(ctx context.Context, arg database.IsOrderWithItemsExistsParams) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsOrderWithItemsExists", ctx, arg)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsOrderWithItemsExists indicates an expected call of IsOrderWithItemsExists.
func (mr *MockStoreMockRecorder) IsOrderWithItemsExists(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsOrderWithItemsExists", reflect.TypeOf((*MockStore)(nil).IsOrderWithItemsExists), ctx, arg)
}

// IsProductExists mocks base method.
func (m *MockStore) IsProductExists(ctx context.Context, id int64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsProductExists", ctx, id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsProductExists indicates an expected call of IsProductExists.
func (mr *MockStoreMockRecorder) IsProductExists(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsProductExists", reflect.TypeOf((*MockStore)(nil).IsProductExists), ctx, id)
}

// IsTableAvailableOrReserved mocks base method.
func (m *MockStore) IsTableAvailableOrReserved(ctx context.Context, id int64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsTableAvailableOrReserved", ctx, id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsTableAvailableOrReserved indicates an expected call of IsTableAvailableOrReserved.
func (mr *MockStoreMockRecorder) IsTableAvailableOrReserved(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsTableAvailableOrReserved", reflect.TypeOf((*MockStore)(nil).IsTableAvailableOrReserved), ctx, id)
}

// IsTableExists mocks base method.
func (m *MockStore) IsTableExists(ctx context.Context, id int64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsTableExists", ctx, id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsTableExists indicates an expected call of IsTableExists.
func (mr *MockStoreMockRecorder) IsTableExists(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsTableExists", reflect.TypeOf((*MockStore)(nil).IsTableExists), ctx, id)
}

// IsTableSessionActive mocks base method.
func (m *MockStore) IsTableSessionActive(ctx context.Context, sessionid pgtype.UUID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsTableSessionActive", ctx, sessionid)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsTableSessionActive indicates an expected call of IsTableSessionActive.
func (mr *MockStoreMockRecorder) IsTableSessionActive(ctx, sessionid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsTableSessionActive", reflect.TypeOf((*MockStore)(nil).IsTableSessionActive), ctx, sessionid)
}

// IsTableSessionExists mocks base method.
func (m *MockStore) IsTableSessionExists(ctx context.Context, sessionid pgtype.UUID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsTableSessionExists", ctx, sessionid)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsTableSessionExists indicates an expected call of IsTableSessionExists.
func (mr *MockStoreMockRecorder) IsTableSessionExists(ctx, sessionid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsTableSessionExists", reflect.TypeOf((*MockStore)(nil).IsTableSessionExists), ctx, sessionid)
}

// ListCategory mocks base method.
func (m *MockStore) ListCategory(ctx context.Context) ([]*database.ListCategoryRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCategory", ctx)
	ret0, _ := ret[0].([]*database.ListCategoryRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCategory indicates an expected call of ListCategory.
func (mr *MockStoreMockRecorder) ListCategory(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCategory", reflect.TypeOf((*MockStore)(nil).ListCategory), ctx)
}

// ListOrderStatus mocks base method.
func (m *MockStore) ListOrderStatus(ctx context.Context) ([]*database.ListOrderStatusRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOrderStatus", ctx)
	ret0, _ := ret[0].([]*database.ListOrderStatusRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOrderStatus indicates an expected call of ListOrderStatus.
func (mr *MockStoreMockRecorder) ListOrderStatus(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrderStatus", reflect.TypeOf((*MockStore)(nil).ListOrderStatus), ctx)
}

// ListPaymentMethods mocks base method.
func (m *MockStore) ListPaymentMethods(ctx context.Context) ([]*database.ListPaymentMethodsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPaymentMethods", ctx)
	ret0, _ := ret[0].([]*database.ListPaymentMethodsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPaymentMethods indicates an expected call of ListPaymentMethods.
func (mr *MockStoreMockRecorder) ListPaymentMethods(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPaymentMethods", reflect.TypeOf((*MockStore)(nil).ListPaymentMethods), ctx)
}

// ListTableStatus mocks base method.
func (m *MockStore) ListTableStatus(ctx context.Context) ([]*database.ListTableStatusRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTableStatus", ctx)
	ret0, _ := ret[0].([]*database.ListTableStatusRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTableStatus indicates an expected call of ListTableStatus.
func (mr *MockStoreMockRecorder) ListTableStatus(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTableStatus", reflect.TypeOf((*MockStore)(nil).ListTableStatus), ctx)
}

// QuickSearchTables mocks base method.
func (m *MockStore) QuickSearchTables(ctx context.Context, arg database.QuickSearchTablesParams) ([]*database.QuickSearchTablesRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QuickSearchTables", ctx, arg)
	ret0, _ := ret[0].([]*database.QuickSearchTablesRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QuickSearchTables indicates an expected call of QuickSearchTables.
func (mr *MockStoreMockRecorder) QuickSearchTables(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QuickSearchTables", reflect.TypeOf((*MockStore)(nil).QuickSearchTables), ctx, arg)
}

// SearchOrderItems mocks base method.
func (m *MockStore) SearchOrderItems(ctx context.Context, arg database.SearchOrderItemsParams) ([]*database.SearchOrderItemsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchOrderItems", ctx, arg)
	ret0, _ := ret[0].([]*database.SearchOrderItemsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchOrderItems indicates an expected call of SearchOrderItems.
func (mr *MockStoreMockRecorder) SearchOrderItems(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchOrderItems", reflect.TypeOf((*MockStore)(nil).SearchOrderItems), ctx, arg)
}

// SearchOrderItemsIsNotFinal mocks base method.
func (m *MockStore) SearchOrderItemsIsNotFinal(ctx context.Context, arg database.SearchOrderItemsIsNotFinalParams) ([]*database.SearchOrderItemsIsNotFinalRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchOrderItemsIsNotFinal", ctx, arg)
	ret0, _ := ret[0].([]*database.SearchOrderItemsIsNotFinalRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchOrderItemsIsNotFinal indicates an expected call of SearchOrderItemsIsNotFinal.
func (mr *MockStoreMockRecorder) SearchOrderItemsIsNotFinal(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchOrderItemsIsNotFinal", reflect.TypeOf((*MockStore)(nil).SearchOrderItemsIsNotFinal), ctx, arg)
}

// SearchProducts mocks base method.
func (m *MockStore) SearchProducts(ctx context.Context, arg database.SearchProductsParams) ([]*database.SearchProductsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchProducts", ctx, arg)
	ret0, _ := ret[0].([]*database.SearchProductsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchProducts indicates an expected call of SearchProducts.
func (mr *MockStoreMockRecorder) SearchProducts(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchProducts", reflect.TypeOf((*MockStore)(nil).SearchProducts), ctx, arg)
}

// SearchTables mocks base method.
func (m *MockStore) SearchTables(ctx context.Context, arg database.SearchTablesParams) ([]*database.SearchTablesRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchTables", ctx, arg)
	ret0, _ := ret[0].([]*database.SearchTablesRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchTables indicates an expected call of SearchTables.
func (mr *MockStoreMockRecorder) SearchTables(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchTables", reflect.TypeOf((*MockStore)(nil).SearchTables), ctx, arg)
}

// TXCreateOrder mocks base method.
func (m *MockStore) TXCreateOrder(ctx context.Context, arg database.TXCreateOrderParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TXCreateOrder", ctx, arg)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TXCreateOrder indicates an expected call of TXCreateOrder.
func (mr *MockStoreMockRecorder) TXCreateOrder(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TXCreateOrder", reflect.TypeOf((*MockStore)(nil).TXCreateOrder), ctx, arg)
}

// TXCreateTableSession mocks base method.
func (m *MockStore) TXCreateTableSession(ctx context.Context, arg database.CreateTableSessionParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TXCreateTableSession", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// TXCreateTableSession indicates an expected call of TXCreateTableSession.
func (mr *MockStoreMockRecorder) TXCreateTableSession(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TXCreateTableSession", reflect.TypeOf((*MockStore)(nil).TXCreateTableSession), ctx, arg)
}

// UpdateOrderItemsStatus mocks base method.
func (m *MockStore) UpdateOrderItemsStatus(ctx context.Context, arg database.UpdateOrderItemsStatusParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrderItemsStatus", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrderItemsStatus indicates an expected call of UpdateOrderItemsStatus.
func (mr *MockStoreMockRecorder) UpdateOrderItemsStatus(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrderItemsStatus", reflect.TypeOf((*MockStore)(nil).UpdateOrderItemsStatus), ctx, arg)
}

// UpdateOrderItemsStatusServed mocks base method.
func (m *MockStore) UpdateOrderItemsStatusServed(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrderItemsStatusServed", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrderItemsStatusServed indicates an expected call of UpdateOrderItemsStatusServed.
func (mr *MockStoreMockRecorder) UpdateOrderItemsStatusServed(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrderItemsStatusServed", reflect.TypeOf((*MockStore)(nil).UpdateOrderItemsStatusServed), ctx, id)
}

// UpdateOrderStatus mocks base method.
func (m *MockStore) UpdateOrderStatus(ctx context.Context, arg database.UpdateOrderStatusParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrderStatus", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrderStatus indicates an expected call of UpdateOrderStatus.
func (mr *MockStoreMockRecorder) UpdateOrderStatus(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrderStatus", reflect.TypeOf((*MockStore)(nil).UpdateOrderStatus), ctx, arg)
}

// UpdateOrderStatusCompletedAndAmount mocks base method.
func (m *MockStore) UpdateOrderStatusCompletedAndAmount(ctx context.Context, arg database.UpdateOrderStatusCompletedAndAmountParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrderStatusCompletedAndAmount", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrderStatusCompletedAndAmount indicates an expected call of UpdateOrderStatusCompletedAndAmount.
func (mr *MockStoreMockRecorder) UpdateOrderStatusCompletedAndAmount(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrderStatusCompletedAndAmount", reflect.TypeOf((*MockStore)(nil).UpdateOrderStatusCompletedAndAmount), ctx, arg)
}

// UpdateOrderStatusWaitForPayment mocks base method.
func (m *MockStore) UpdateOrderStatusWaitForPayment(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrderStatusWaitForPayment", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrderStatusWaitForPayment indicates an expected call of UpdateOrderStatusWaitForPayment.
func (mr *MockStoreMockRecorder) UpdateOrderStatusWaitForPayment(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrderStatusWaitForPayment", reflect.TypeOf((*MockStore)(nil).UpdateOrderStatusWaitForPayment), ctx, id)
}

// UpdateProduct mocks base method.
func (m *MockStore) UpdateProduct(ctx context.Context, arg database.UpdateProductParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProduct", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProduct indicates an expected call of UpdateProduct.
func (mr *MockStoreMockRecorder) UpdateProduct(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProduct", reflect.TypeOf((*MockStore)(nil).UpdateProduct), ctx, arg)
}

// UpdateProductAvailability mocks base method.
func (m *MockStore) UpdateProductAvailability(ctx context.Context, arg database.UpdateProductAvailabilityParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProductAvailability", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProductAvailability indicates an expected call of UpdateProductAvailability.
func (mr *MockStoreMockRecorder) UpdateProductAvailability(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProductAvailability", reflect.TypeOf((*MockStore)(nil).UpdateProductAvailability), ctx, arg)
}

// UpdateStatusCloseTableSession mocks base method.
func (m *MockStore) UpdateStatusCloseTableSession(ctx context.Context, sessionid pgtype.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatusCloseTableSession", ctx, sessionid)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStatusCloseTableSession indicates an expected call of UpdateStatusCloseTableSession.
func (mr *MockStoreMockRecorder) UpdateStatusCloseTableSession(ctx, sessionid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatusCloseTableSession", reflect.TypeOf((*MockStore)(nil).UpdateStatusCloseTableSession), ctx, sessionid)
}

// UpdateStatusPaymentFail mocks base method.
func (m *MockStore) UpdateStatusPaymentFail(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatusPaymentFail", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStatusPaymentFail indicates an expected call of UpdateStatusPaymentFail.
func (mr *MockStoreMockRecorder) UpdateStatusPaymentFail(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatusPaymentFail", reflect.TypeOf((*MockStore)(nil).UpdateStatusPaymentFail), ctx, id)
}

// UpdateStatusPaymentPaidByID mocks base method.
func (m *MockStore) UpdateStatusPaymentPaidByID(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatusPaymentPaidByID", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStatusPaymentPaidByID indicates an expected call of UpdateStatusPaymentPaidByID.
func (mr *MockStoreMockRecorder) UpdateStatusPaymentPaidByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatusPaymentPaidByID", reflect.TypeOf((*MockStore)(nil).UpdateStatusPaymentPaidByID), ctx, id)
}

// UpdateStatusPaymentPaidByTransactionID mocks base method.
func (m *MockStore) UpdateStatusPaymentPaidByTransactionID(ctx context.Context, transactionID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatusPaymentPaidByTransactionID", ctx, transactionID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStatusPaymentPaidByTransactionID indicates an expected call of UpdateStatusPaymentPaidByTransactionID.
func (mr *MockStoreMockRecorder) UpdateStatusPaymentPaidByTransactionID(ctx, transactionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatusPaymentPaidByTransactionID", reflect.TypeOf((*MockStore)(nil).UpdateStatusPaymentPaidByTransactionID), ctx, transactionID)
}

// UpdateTables mocks base method.
func (m *MockStore) UpdateTables(ctx context.Context, arg database.UpdateTablesParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTables", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTables indicates an expected call of UpdateTables.
func (mr *MockStoreMockRecorder) UpdateTables(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTables", reflect.TypeOf((*MockStore)(nil).UpdateTables), ctx, arg)
}

// UpdateTablesStatus mocks base method.
func (m *MockStore) UpdateTablesStatus(ctx context.Context, arg database.UpdateTablesStatusParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTablesStatus", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTablesStatus indicates an expected call of UpdateTablesStatus.
func (mr *MockStoreMockRecorder) UpdateTablesStatus(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTablesStatus", reflect.TypeOf((*MockStore)(nil).UpdateTablesStatus), ctx, arg)
}

// UpdateTablesStatusAvailable mocks base method.
func (m *MockStore) UpdateTablesStatusAvailable(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTablesStatusAvailable", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTablesStatusAvailable indicates an expected call of UpdateTablesStatusAvailable.
func (mr *MockStoreMockRecorder) UpdateTablesStatusAvailable(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTablesStatusAvailable", reflect.TypeOf((*MockStore)(nil).UpdateTablesStatusAvailable), ctx, id)
}

// UpdateTablesStatusDisabled mocks base method.
func (m *MockStore) UpdateTablesStatusDisabled(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTablesStatusDisabled", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTablesStatusDisabled indicates an expected call of UpdateTablesStatusDisabled.
func (mr *MockStoreMockRecorder) UpdateTablesStatusDisabled(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTablesStatusDisabled", reflect.TypeOf((*MockStore)(nil).UpdateTablesStatusDisabled), ctx, id)
}

// UpdateTablesStatusOccupied mocks base method.
func (m *MockStore) UpdateTablesStatusOccupied(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTablesStatusOccupied", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTablesStatusOccupied indicates an expected call of UpdateTablesStatusOccupied.
func (mr *MockStoreMockRecorder) UpdateTablesStatusOccupied(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTablesStatusOccupied", reflect.TypeOf((*MockStore)(nil).UpdateTablesStatusOccupied), ctx, id)
}

// UpdateTablesStatusOrdered mocks base method.
func (m *MockStore) UpdateTablesStatusOrdered(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTablesStatusOrdered", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTablesStatusOrdered indicates an expected call of UpdateTablesStatusOrdered.
func (mr *MockStoreMockRecorder) UpdateTablesStatusOrdered(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTablesStatusOrdered", reflect.TypeOf((*MockStore)(nil).UpdateTablesStatusOrdered), ctx, id)
}

// UpdateTablesStatusReserved mocks base method.
func (m *MockStore) UpdateTablesStatusReserved(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTablesStatusReserved", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTablesStatusReserved indicates an expected call of UpdateTablesStatusReserved.
func (mr *MockStoreMockRecorder) UpdateTablesStatusReserved(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTablesStatusReserved", reflect.TypeOf((*MockStore)(nil).UpdateTablesStatusReserved), ctx, id)
}
