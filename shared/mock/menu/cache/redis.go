// Code generated by MockGen. DO NOT EDIT.
// Source: food-story/menu-service/internal/adapter/cache (interfaces: RedisTableCacheInterface)
//
// Generated by this command:
//
//	mockgen -package mock -destination shared/mock/menu/cache/redis.go food-story/menu-service/internal/adapter/cache RedisTableCacheInterface
//

// Package mock is a generated GoMock package.
package mock

import (
	exceptions "food-story/pkg/exceptions"
	reflect "reflect"

	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockRedisTableCacheInterface is a mock of RedisTableCacheInterface interface.
type MockRedisTableCacheInterface struct {
	ctrl     *gomock.Controller
	recorder *MockRedisTableCacheInterfaceMockRecorder
	isgomock struct{}
}

// MockRedisTableCacheInterfaceMockRecorder is the mock recorder for MockRedisTableCacheInterface.
type MockRedisTableCacheInterfaceMockRecorder struct {
	mock *MockRedisTableCacheInterface
}

// NewMockRedisTableCacheInterface creates a new mock instance.
func NewMockRedisTableCacheInterface(ctrl *gomock.Controller) *MockRedisTableCacheInterface {
	mock := &MockRedisTableCacheInterface{ctrl: ctrl}
	mock.recorder = &MockRedisTableCacheInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRedisTableCacheInterface) EXPECT() *MockRedisTableCacheInterfaceMockRecorder {
	return m.recorder
}

// IsCachedTableExist mocks base method.
func (m *MockRedisTableCacheInterface) IsCachedTableExist(sessionID uuid.UUID) *exceptions.CustomError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsCachedTableExist", sessionID)
	ret0, _ := ret[0].(*exceptions.CustomError)
	return ret0
}

// IsCachedTableExist indicates an expected call of IsCachedTableExist.
func (mr *MockRedisTableCacheInterfaceMockRecorder) IsCachedTableExist(sessionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsCachedTableExist", reflect.TypeOf((*MockRedisTableCacheInterface)(nil).IsCachedTableExist), sessionID)
}
