// Code generated by MockGen. DO NOT EDIT.
// Source: food-story/order-service/internal/adapter/queue/producer (interfaces: QueueProducerInterface)
//
// Generated by this command:
//
//	mockgen -package mockqueue -destination shared/mock/queue/order/queue.go food-story/order-service/internal/adapter/queue/producer QueueProducerInterface
//

// Package mockqueue is a generated GoMock package.
package mockqueue

import (
	model "food-story/shared/model"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockQueueProducerInterface is a mock of QueueProducerInterface interface.
type MockQueueProducerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockQueueProducerInterfaceMockRecorder
	isgomock struct{}
}

// MockQueueProducerInterfaceMockRecorder is the mock recorder for MockQueueProducerInterface.
type MockQueueProducerInterfaceMockRecorder struct {
	mock *MockQueueProducerInterface
}

// NewMockQueueProducerInterface creates a new mock instance.
func NewMockQueueProducerInterface(ctrl *gomock.Controller) *MockQueueProducerInterface {
	mock := &MockQueueProducerInterface{ctrl: ctrl}
	mock.recorder = &MockQueueProducerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQueueProducerInterface) EXPECT() *MockQueueProducerInterfaceMockRecorder {
	return m.recorder
}

// PublishOrder mocks base method.
func (m *MockQueueProducerInterface) PublishOrder(item model.OrderItems) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishOrder", item)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishOrder indicates an expected call of PublishOrder.
func (mr *MockQueueProducerInterfaceMockRecorder) PublishOrder(item any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishOrder", reflect.TypeOf((*MockQueueProducerInterface)(nil).PublishOrder), item)
}
